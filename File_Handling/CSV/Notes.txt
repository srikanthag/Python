1. CSV Files

A csv stands for "comma separated values", which is defined as a simple file format that uses specific structuring to arrange tabular data.


============================================================================================================

### Read CSV ####

** Using csv.reader() function
In Python, the csv.reader() module is used to read the csv file. It takes each row of the file and makes a list of all the columns.

with open(path) as csv_file:
    emp = csv.reader(csv_file)
    for row in emp:
        print(row)


** Using csv.DictReader() function
We can also use DictReader() function to read the csv file directly into a dictionary rather than deal with a list of individual string elements.

with open(path) as csv_file:
    emp = csv.DictReader(csv_file)
    for row in emp:
        print(row)

============================================================================================================

### Write CSV ###

** Writing CSV Files using writerow() and writerows()
It presents two functions, i.e., writerow() and writerows().
The writerow() function only write one row, and the writerows() function write more than one row.

# with open("example.csv", "w") as csv_file:
#     write_obj = csv.writer(csv_file)
#     write_obj.writerow(["x", "y", "z"])
#     write_obj.writerow([10, 20, 30])
#     write_obj.writerows([(1,2,3), (5,6,7), (8,9,7)])


** Writing CSV Files using DictWriter()

# with open("example.csv", "w") as csv_file:
#     dictwriter_obj = csv.DictWriter(csv_file,["x","y","z"])
#     dictwriter_obj.writeheader()
#     dictwriter_obj.writerow({"x": 10,"y":20,"z":30 })












