Python JSON
JSON, which stands for JavaScript Object Notation, is a popular data format for online data exchange.
JSON is the best format for organizing data between a client and a server.


The following techniques

load()
loads()
dump()
dumps()

===============================================================================================================

1. Serializing JSON

The process used to translate Python objects to JSON is known as serialization. When a computer needs to process a lot of data,
it is a good idea to store that data in a file. Using the JSON function, we can store JSON data in a file.
The dump() and dumps() methods are available in the json module and are used to modify Python objects.

import json

** dump()
data = "hello"
with open("example.pkl","wb") as file:
     pickle.dump(data, file)


** dumps()
a = {"hai": 3, "hello": 4}
b = json.dumps(a)   #serilize any python object into json format file
# print(b)
# print(type(b))      # str

===============================================================================================================

2. Deserialization JSON
The process of converting JSON data into Python objects is known as deserialization.
The load() and loads() methods of the json module are used to transform JSON data into Python objects.

** "load()"
with open("example.pkl","rb") as file:
     res = pickle.load(file)
     print(res)

** "loads()"
a = {"hai": 3, "hello": 4}
b = json.dumps(a)   #serilize any python object into json format file
c = json.loads(b)    #deserilize any json string to python object'''
print(type(c))      # dict



