"Python"
a. Python is programming language.

b. Powerful object-oriented programming language: Python is considered a powerful object-oriented programming (OOP) language because it allows you to model real-world entities as objects, and it provides features like inheritance, polymorphism, encapsulation, and abstraction. These OOP principles help you write more modular, reusable, and maintainable code.

In Python, everything is an object, including basic data types like integers, strings, lists, etc. You can create your own classes and objects, and Python supports features like:

** Encapsulation: Bundling data (attributes) and methods (functions) that operate on the data within a single class.
** Inheritance: A way to form new classes using classes that have already been defined, promoting code reuse.
** Polymorphism: The ability for different classes to be treated as instances of the same class through a common interface, often allowing the same method to be used for different types.
** Abstraction: Hiding the complexity and only exposing essential details to the user.


" Without creating an Object ""
class python:
     def designer():
         print("Guido van Rossum")
python.designer()

" With creating an Object ""
class python:
     def designer():
         print("Guido van Rossum")
p = python
p.designer()


c. Support dynamic memory allocation: Python uses dynamic typing and internally handles memory allocation for variables, lists, dictionaries, etc.
In Python, the memory is dynamically allocated whenever you create a new object or data structure. The garbage collector is responsible for deallocating memory when objects are no longer referenced, which means you don't have to manually release memory in most cases.

# Example of dynamic memory allocation with lists

# Create an empty list (dynamic allocation)
my_list = []

# Add items dynamically
my_list.append(10)
my_list.append(20)
my_list.append(30)

print("List:", my_list)

# The list grows dynamically based on the items added to it
my_list.append(40)
print("Updated List:", my_list)

# Even when you remove items, memory management is handled automatically
my_list.remove(20)
print("After removal:", my_list)


d. Python is an interpreted language:
** No Compilation Step: In interpreted languages like Python, there's no separate compilation step where the code is converted into a machine-specific binary. The interpreter directly executes the high-level code.
** Portability: Because Python code is interpreted, it can run on any platform that has a Python interpreter, without needing to recompile for different systems.
** Error Detection: Since Python runs code line-by-line, errors are detected when the interpreter encounters them during execution, which can make debugging easier.


e. Cross-platform Language: Python is cross-platform, which means you can write Python code once and run it on any platform (Windows, macOS, Linux) without modification, as long as Python is installed.


f. Large Standard Library: Python has a large standard library that includes modules for various functionalities, including file I/O, regular expressions, networking, databases, web frameworks, and more.


g. Garbage Collection
Python has automatic memory management with garbage collection. The interpreter automatically manages memory allocation and de-allocation, which means you don’t need to manually free up memory.

# No need to manually free memory
a = [1, 2, 3]
b = a
a = None  # The garbage collector will free memory when 'a' is no longer referenced

=======================================================================================================

Python Compilation:
Python is typically referred to as an interpreted language, but it actually undergoes some compilation steps before it is executed

** Source Code to Bytecode (Compilation)
When you write a Python program (e.g., script.py), it is first compiled into bytecode, which is a lower-level representation of your code, but not machine code. This bytecode is platform-independent.
The compilation step is done automatically by the Python interpreter.
For example, if you have a script.py, Python compiles it into script.pyc (a bytecode file).
These .pyc files are stored in the __pycache__ directory, so the next time the program runs, Python can reuse the compiled bytecode for faster execution.

** Bytecode to Execution (Interpretation)
The bytecode is then interpreted by the Python Virtual Machine (PVM), which executes the program. The PVM translates the bytecode into machine-specific instructions that your computer can understand.

Example

* Source Code (script.py)
# script.py
def greet(name):
    print(f"Hello, {name}!")

greet("Alice")

* Compilation to Bytecode When you run script.py, Python compiles it into bytecode (script.pyc), which you can find inside the __pycache__ folder.

* Bytecode Execution After compiling, the Python Virtual Machine interprets the bytecode and executes the program. The output would be:
Hello, Alice!

=======================================================================================================

The Python Virtual Machine:

The Python Virtual Machine (PVM) is a part of the Python interpreter responsible for executing Python bytecode. When you run a Python program, it doesn't directly convert your code into machine code (which the hardware understands). Instead, Python goes through an intermediary step—bytecode—and the PVM interprets this bytecode to run your program.

=======================================================================================================

Identifier:
User defined name to represent a variable, functions, class, modules ect.

Rules:
a. Name can start "_" or "alphabet".
b. Can be alphanumeric but not start with number.
c. No special character except "_".
d. Keywords cannot be identifier.
e. Max char is 79

Note: To check weather python identifier is valid or not >>> "string".isidentifier

======================================================================================================

Keywords:

Special words which having special meaning.
Cant assign any value to the keyword.

Note: To get all keywords
a. help("keyword")
b. import keyword
    print(keyword.kwlist)

['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

======================================================================================================

Python Variable:
Variable is a name that is used to refer to memory location. Python variable is also known as an identifier and used to hold value.

a=10
x=a
print(id(x))

"id" returns the memory location of an object

=====================================================================================================

Memory allocation in variables:

There are two parts of memory (RAM)
a. Stack memory (Organized memory)
b. Heap memory (Unorganized memory)

In this method references are stored in Stack and values are stored in Heap.

Eg:
* When a=10, 10 is created in heap and its reference is assigned to variable 'a'.
* x = a here will crete another reference variable if object already exist with same value.
* If we change the value of a (a=15) then link b/w 'a' and 10 disconnected. But 'x' still refer to 10.
* If we assign another value to 'x' (x=20). It is also disconnect link b/w 'x' and 10
* Now 10 does not have any reference link. The garbage collector automatically delete the object from heap memory.



---------------------


In Python, memory allocation is dynamic, meaning that the interpreter automatically allocates memory for variables when they are assigned values. When you create a variable and assign it a value, Python automatically manages memory for that variable based on the type of data it holds.

* Simple variable assignment
x = 10
y = 10

- When a = 10 is executed, Python allocates memory for a and stores the integer value 10.
- Similarly, when b = 20 is executed, Python allocates memory for b and stores the integer value 20.
- Then, c = a + b creates a new integer value (the sum of a and b), and allocates memory for c to store that value (which is 30).


* Working immutable types
x = 10
y = 10

- Here, both x and y refer to the same memory location because integers are immutable in Python.
- Python uses an optimization called "interning" for small integers to avoid allocating memory multiple times for the same value.

* Working mutable types
a = [1, 2, 3]
b = a

- When you assign b = a, both a and b point to the same list in memory. Lists are mutable, so modifying the list through a will also affect b, as they reference the same memory location.


* Dynamic memory allocation
x = [1, 2, 3]
y = x
y.append(4)

print(x)  # Output: [1, 2, 3, 4]
print(y)  # Output: [1, 2, 3, 4]

- The list [1, 2, 3] is created in memory and assigned to x.
- When y = x is executed, both x and y point to the same list in memory.
- Modifying the list through y also affects x, since they both refer to the same memory location.

* Garbage Collection
Python uses automatic memory management with garbage collection. When objects are no longer in use, the memory is freed automatically.
a = [1, 2, 3]
b = a
a = [4, 5, 6]  # Now 'a' points to a new list

- When a is reassigned to a new list, the previous list [1, 2, 3] is no longer referenced by any variable.
- Python's garbage collector will eventually free the memory used by the original list.

=====================================================================================================

Print:
Standard function used to print the output.

Parameter
a. end
print(value end"string")
default value:\n

b. sep
print(value, sep="string")

=====================================================================================================

Input:
The input() function takes input from the user and returns it.
name = input("Enter your name: ")
print(name)

# Output:
# Enter your name: James
# James
======================================================================================================

Python dir() Function
The dir() function returns all properties and methods of the specified object, without the values. This function will return all
the properties and methods, even built-in properties which are default for all object.

a = 'srikantn'
print(dir(a[3]))
print(dir(a))

======================================================================================================

Python ord(), chr() functions
* Python ord() function takes string argument of a single Unicode character and return its integer Unicode code point value (Ascii value).

x = ord('A')
print(x)

* Python chr() function takes integer argument and return the string representing a character at that code point.

y = chr(65)
print(y)
print(chr(123))
print(chr(36))

======================================================================================================
Hashable object:
* These objects which implements __hash__ magic method.
* Only immutable have hash value. It is used to check mutable or immutable.
* All immutable are hashable but all hashable are not immutable.

 Eg.
 a = 'sr'
print(dir(a))       # Output have __hash__ method

=====================================================================================================

Mutable and Immutable data types

** Mutable datatypes: It will allow modification on the original object
List, set, dict
** Immutable data type: Does not allow modification. even if the modification is done there will be created new object.
string, tuple, int, float

=====================================================================================================

Sequences and Iterable
* An iterable is anything you can loop over with a for loop in Python. Iterables can be looped over, and anything that can be looped over is an iterable.
   Sets, dictionaries, files, and generators are all iterables but none of these things are sequences.

* Sequences are iterables that have a specific set of features. They can be indexed starting from 0 and ending at one less than the length of the sequence, they have a length, and they can be sliced.
  Lists, tuples, strings

========================================================================================================

Default values:

Int: 0/Int()
Float: 0.0/float()
Bool: False/bool()
Complex: 0j/0+0j/complex()
String: ' '/str
List: []/list()
Tuple: ()/tuple()
Set: set()
Dictionary: {}/dit()

=========================================================================================================

Data types:

Datatypes are represent the type of data ths is store in memory location.
Variable can hold the value and every value has a data type.

type: returns the type of data
d = "srikanth"
print(type(d))

dir(): returns the list of attributes.
d = "srikanth"
print(dir(d))

=========================================================================================================

Different types of datatypes

Text Type:	str
Numeric Types:	int, float, complex
Sequence Types:	list, tuple, range
Mapping Type:	dict
Set Types:	set, frozenset
Boolean Type:	bool
Binary Types:	bytes, bytearray, memory view
None Type:	NoneType

=========================================================================================================

Counters:
Counters are referred to as the container that holds the count of each of the elements that are available in the container.
They allow us to access the stored object. The dictionary class holds the Counter as the subclass.
Counter helps us to count the key-value pairs in an object.

Eg:
from collections import Counter
List1 = ['a', 'b', 'a', 'a', 'c', 'd', 'e', 'c', 'd', 'f']
Str = "sriakknjdkfhdf"
# Print count of the variable
print(Counter(List1))
print(Counter(Str))

=========================================================================================================

Itertools:
In Python, Itertools is the inbuilt module that allows us to handle the iterators in an efficient way.
They make iterating through the iterables like lists and strings very easily. One such itertools function is islice().

** islice(iterable,start,stop,step) - It slices the given iterable according to given position.
It accepts four arguments respectively and these are iterable, container, starting pos., ending position and step(optional).

=========================================================================================================
Deque:
A Deque, also known as a Double-ended queue, has the attribute of inserting and deleting data elements from either end.
The deque module is a segment of the library known as collections. It contains the attributes to add and remove data elements
that can be invoked directly with parameters. In order to declare a deque, we have to import the collections library first.

=========================================================================================================

Tell() and Seek()
The tell() method returns the current file position in a file stream
seek() function is used to change the position of the File Handle to a given specific position.

=========================================================================================================

The super() function is used to give access to methods and properties of a parent or sibling class.
The super() function returns an object that represents the parent class.

=========================================================================================================