"Python"
a. Python is programming language.

b. Powerful object-oriented programming language: Python supports object-oriented language and concepts of classes and objects
    come into existence. It supports inheritance, polymorphism, and encapsulation, etc. The object-oriented procedure helps to
    programmer to write reusable code and develop applications in less code.

" Without creating an Object ""
class python:
     def designer():
         print("Guido van Rossum")
python.designer()

" With creating an Object ""
class python:
     def designer():
         print("Guido van Rossum")
p = python
p.designer()


c. Support dynamic memory allocation: In Python, we don't need to specify the data-type of the variable. When we assign some value to the variable, it automatically allocates the memory to the variable at run time.
  Suppose we are assigned integer value 15 to x, then we don't need to write int x = 15. Just write x = 15.

d. Python is an interpreted language: it means the Python program is executed one line at a time.

e. Cross-platform Language: Python can run equally on different platforms such as Windows, Linux, UNIX, and Macintosh, etc.
   So, we can say that Python is a portable language.

f. Large Standard Library: It provides a vast range of libraries for the various fields such as machine learning, web developer,
   and also for the scripting.
   There are various machine learning libraries, such as Tensor flow, Pandas, Numpy, Keras, and Pytorch, etc.
   Django, flask, pyramids are the popular framework for Python web development.

=======================================================================================================

""" Python Compilation """
Compilation âˆ’ The source code in python is saved as a . py file which is then compiled into a format known as byte code,
byte code is then converted to machine code. After the compilation, the code is stored in . pyc files and is regenerated when the
source is updated.

=======================================================================================================

" Identifier"
User defined name to represent a variable, functions, class, modules ect.

Rules:
a. Name can start "_" or "alphabet".
b. Can be alphanumeric but not start with number.
c. No special character except "_".
d. Keywords cannot be identifier.
e. Max char is 79

Note: To check weather python identifier is valid or not >>> "string".isidentifier

======================================================================================================

" Keywords "

Special words which having special meaning.
Cant assign any value to the keyword.

Note: To get all keywords
a. help("keyword")
b. import keyword
    print(keyword.kwlist)

['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

======================================================================================================

" Python Variable "
Variable is a name that is used to refer to memory location. Python variable is also known as an identifier and used to hold value.

a=10
x=a
print(id(x))

"id" returns the memory location of an object

=====================================================================================================

" Memory allocation in variables "

There are two parts of memory (RAM)
a. Stack memory (Organized memory)
b. Heap memory (Unorganized memory)

In this method references are stored in Stack and values are stored in Heap.

Eg:
* When a=10, 10 is created in heap and its reference is assigned to variable 'a'.
* x = a, here will crete another reference variable if object already exist with same value.
* If we change the value of a (a=15) then link b/w 'a' and 10 disconnected. But 'x' still refer to 10.
* If we assign another value to 'x' (x=20). It is also disconnect link b/w 'x' and 10
* Now 10 does not have any reference link. The garbage collector automatically delete the object from heap memory.

=====================================================================================================

" Print "
Standard function used to print the output.

Parameter
a. end
print(value end"string")
default value:\n

b. sep
print(value, sep="string")

=====================================================================================================

" Input "
The input() function takes input from the user and returns it.
name = input("Enter your name: ")
print(name)

# Output:
# Enter your name: James
# James
======================================================================================================

Python dir() Function
The dir() function returns all properties and methods of the specified object, without the values. This function will return all
the properties and methods, even built-in properties which are default for all object.

a = 'srikantn'
print(dir(a[3]))
print(dir(a))

======================================================================================================

Python ord(), chr() functions
* Python ord() function takes string argument of a single Unicode character and return its integer Unicode code point value (Ascii value).

x = ord('A')
print(x)

* Python chr() function takes integer argument and return the string representing a character at that code point.

y = chr(65)
print(y)
print(chr(123))
print(chr(36))

======================================================================================================
"Hashable object"
* These objects which implements __hash__ magic method.
* Only immutable have hash value. It is used to check mutable or immutable.
* All immutable are hashable but all hashable are not immutable.

 Eg.
 a = 'sr'
print(dir(a))       # Output have __hash__ method

=====================================================================================================

Mutable and Immutable data types

** Mutable datatypes: It will allow modification on the original object
List, set, dict
** Immutable data type: Does not allow modification. even if the modification is done there will be created new object.
string, tuple, int, float

=====================================================================================================

Sequences and Iterable
* An iterable is anything you can loop over with a for loop in Python. Iterables can be looped over, and anything that can be looped over is an iterable.
   Sets, dictionaries, files, and generators are all iterables but none of these things are sequences.

* Sequences are iterables that have a specific set of features. They can be indexed starting from 0 and ending at one less than the length of the sequence, they have a length, and they can be sliced.
  Lists, tuples, strings

=====================================================================================================
"" Python Operators ""

The operator can be defined as a symbol which is responsible for a particular operation between two operands. Operators are the pillars of a program on which the logic is built in a specific programming language. Python provides a variety of operators, which are described as follows.

a. Arithmetic operators.
+ (Addition):	It is used to add two operands. For example, if a = 20, b = 10 => a+b = 30
- (Subtraction): It is used to subtract the second operand from the first operand. If the first operand is less than the second operand, the value results negative. For example, if a = 20, b = 10 => a - b = 10
/ (divide):	It returns the quotient after dividing the first operand by the second operand. For example, if a = 20, b = 10 => a/b = 2.0
* (Multiplication):	It is used to multiply one operand with the other. For example, if a = 20, b = 10 => a * b = 200
% (reminder):	It returns the reminder after dividing the first operand by the second operand. For example, if a = 20, b = 10 => a % b = 0
** (Exponent):	It is an exponent operator represented as it calculates the first operand power to the second operand.
// (Floor division):	It gives the floor value of the quotient produced by dividing the two operands.

b. Comparison operator
Comparison operators are used to comparing the value of the two operands and returns Boolean true or false accordingly.

==	If the value of two operands is equal, then the condition becomes true.
!=	If the value of two operands is not equal, then the condition becomes true.
<=	If the first operand is less than or equal to the second operand, then the condition becomes true.
>=	If the first operand is greater than or equal to the second operand, then the condition becomes true.
>	If the first operand is greater than the second operand, then the condition becomes true.
<	If the first operand is less than the second operand, then the condition becomes true.

c. Assignment Operators
The assignment operators are used to assign the value of the right expression to the left operand.
=	It assigns the value of the right expression to the left operand.
+=	It increases the value of the left operand by the value of the right operand and assigns the modified value back to leftm operand. For example, if a = 10, b = 20 => a+ = b will be equal to a = a+ b and therefore, a = 30.
-=	It decreases the value of the left operand by the value of the right operand and assigns the modified value back to left 			operand. For example, if a = 20, b = 10 => a- = b will be equal to a = a- b and therefore, a = 10.
*=	It multiplies the value of the left operand by the value of the right operand and assigns the modified value back to then the l	eft 		operand. For example, if a = 10, b = 20 => a* = b will be equal to a = a* b and therefore, a = 200.
%=	It divides the value of the left operand by the value of the right operand and assigns the reminder back to the left operand. 	For 		example, if a = 20, b = 10 => a % = b will be equal to a = a % b and therefore, a = 0.
**=	a**=b will be equal to a=a**b, for example, if a = 4, b =2, a**=b will assign 4**2 = 16 to a.
//=	A//=b will be equal to a = a// b, for example, if a = 4, b = 3, a//=b will assign 4//3 = 1 to a.

d. Logical Operators
The logical operators are used primarily in the expression evaluation to make a decision.
and: 	If both the expression are true, then the condition will be true. If a and b are the two expressions.
or:	If one of the expressions is true, then the condition will be true.
not:	If an expression a is true, then not (a) will be false and vice versa.

e. Membership Operators
Python membership operators are used to check the membership of value inside a Python data structure. If the value is present in the data structure, then the resulting value is true otherwise it returns false.

in:	It is evaluated to be true if the first operand is found in the second operand (list, tuple, or dictionary).
not in:	It is evaluated to be true if the first operand is not found in the second operand (list, tuple, or dictionary).

f. Identity Operators
The identity operators are used to decide whether an element certain class or type.
is:	It is evaluated to be true if the reference present at both sides point to the same object.
is not:	It is evaluated to be true if the reference present at both sides do not point to the same object.


========================================================================================================
"Default values"
Int: 0/Int()
Float: 0.0/float()
Bool: False/bool()
Complex: 0j/0+0j/complex()
String: ' '/str
List: []/list()
Tuple: ()/tuple()
Set: set()
Dictionary: {}/dit()

