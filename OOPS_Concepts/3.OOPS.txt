Python supports object-oriented language and concepts of classes and objects come into existence. It supports inheritance, polymorphism, and encapsulation, etc. The object-oriented procedure helps to
programmer to write reusable code and develop applications in less code.

a. Without creating an Object
class python:
     def designer():
         print("Guido van Rossum")
python.designer()

b. With creating an Object
class python:
     def designer():
         print("Guido van Rossum")
p = python
p.designer()

================================================================================================================

1.  CLASS
The class can be defined as a collection of objects. It is a logical entity that has some specific attributes and methods.
For example: if you have an employee class, then it should contain an attribute and method, i.e. an email id, name, age, salary, etc.

=========

a. Instance or Object: The object is an entity that has state and behavior.

b. Method: A function written inside the class is called method and first parameter is "self".
    * self: Holds the address of the instance which is invoking the method.

c. Constructor: In a class "__init__" is called the constructor. It is used to construct object/instance with different variable.
We can have multiple constructor but it will take the latest one.

d. __dict__: Dictionary or other mapping object used to store an object's (writable) attributes.

eg:
class car:
    def __init__(self, modelname, year):     # This is the constructor method
        self.modelname = modelname           # This is an instance variable
        self.year = year                        # This is an instance variable

    def display(self):
        print(self.modelname,self.year)

c1 = car("Toyota", 2016)
print(c1.display())
print(c1.__dict__)

Explanation: In the above example, we have created the class named car, and it has two attributes model-name and year.
We have created a c1 object to access the class attribute. The c1 object will allocate memory for these values.

===============================================================================================================

a. Static Method

Python has a static method that belongs to the class. It is just like a static variable that bounds to the class rather than the
class's object. A static method can be called without creating an object for the class. It means we can directly call the static
method with the reference of the class name.
The staticmethod cannot access the class attributes or the instance attributes.

** staticmethod()
staticmethod() is a built-in function in Python that is used to return a given function as a static method.
Syntax:
staticmethod(function)

E.g.
class Calculator:

  def add_numbers(num1, num2):
    return num1 + num2

Calculator.add_numbers = staticmethod(Calculator.add_numbers)           # convert add_numbers() to static method

sum = Calculator.add_numbers(5, 7)
print('Sum:', sum)          # Output: Sum: 12



** @staticmethod
A @staticmethod is an inbuilt decorator that defines the static method inside the class. It does not receive any argument as a
reference to a class instance or a class calling the static method itself.

* Declares a static method in the class.
* It cannot have cls or self parameter.
* The static method cannot access the class attributes or the instance attributes.

Syntax:

class Abc:
@staticmethod
def function_name (arg1, arg2, ?):
# Statement to be executed
Returns: a static method for function function_name

E.g.1

class Student:
    name = 'unknown' # class attribute

    def __init__(self):
        self.age = 20  # instance attribute

    @staticmethod
    def tostring():
        print('Student Class')

std = Student()
print(std.tostring())


E.g. 2

The static method cannot access the class attributes or instance attributes. It will raise an error if try to do so.

class Student:
    name = 'unknown' # class attribute

    def __init__(self):
        self.age = 20  # instance attribute

    @staticmethod
    def tostring():
        print('name=',name,'age=',self.age)

Student.tostring()   #error


=============================================================================================================

b. Class method

** classmethod()
Python has a built-in function called classmethod() that gives a class method of the specified function.
The first parameter must be cls, which can be used to access class attributes.
The class method can only access the class attributes but not the instance attributes.

E.g.
class Person:
    age = 25

    def Age(cls):
        print('The age is:', cls.age)

# create printAge class method
Person.Age = classmethod(Person.Age)
print(Person.Age())


** @classmethod
@classmethod decorator is used to declare a method in the class as a class method that can be called using
ClassNam .MethodName().


E.g.1, The first parameter must be cls, which can be used to only access class attributes not instance attributes.
class Student:
    name = 'srikanth' # class attribute
    def __init__(self, age):
        self.age = 20  # instance attribute

    @classmethod
    def tostring(cls):
        print('Student Class Attributes: name=',cls.name)

Student.tostring()  # Student Class Attributes: name=srikanth

E.g.2, The class method can only access the class attributes but not the instance attributes.
class Student:
    name = 'unknown' # class attribute
    def __init__(self):
        self.age = 20  # instance attribute

    @classmethod
    def tostring(cls):
        print('Student Class Attributes: name=',cls.name,', age=', cls.age)


Student.tostring() # calling class method  # User will get error

=============================================================================================================

Difference between Class method vs Static Method

* A class method takes cls as the first parameter while a static method needs no specific parameters.
* A class method can access or modify the class state while a static method canâ€™t access or modify it.
* In general, static methods know nothing about the class state. They are utility-type methods that take some
  parameters and work upon those parameters. On the other hand class methods must have class as a parameter.
* We use @classmethod decorator in python to create a class method and we use @staticmethod decorator to create
  a static method in python.

=============================================================================================================

Class Decorator in Python
Decorators are an important and useful tool of Python. It allows us to modify the behavior of the function or class.

To define the class decorator, we need to use a __call__() method of classes. When we need to create an object
that behaves like a function, the function decorator must return an object that behaves like a function.


class NewDocorator:
    def __init__(self, function):
        self.function = function

    def __call__(self):
        # can add some more code
        self.function()

@NewDocorator
def function():
    print("WelCome to JavaTpoint")
function()


========================================================================================

Overload constructor
we can have multiple constructors in class but latest will take

 class Student:
     def __init__(self, name1, class1):
         self.name1 = name1
         self.clas1 = class1

     def __init__(self, name2, class2, age):
         self.name2 = name2
         self.clas2 = class2
         self.age = age

 s = Student('srikanth', 10, 16)
 print(s.__dict__)


=============================================================================================================
=============================================================================================================

2. ENCAPSULATION

It describes the idea of wrapping data and the methods that work on data within one unit. This puts
restrictions on accessing variables and methods directly and can prevent the accidental modification of data

a. Protected members:  The protected members access limited to the defined class and the classes (sub-classes) that are derived from the defined class.
'_' can be overridden in child Class''''''(protected)'''

E.g.
class user:

   def __init__(self, id, name):
     self._id = id
     self._name = name

   def _userdetails(self):
     print("Id: {}, Name: {}".format(self._id, self._name))

class Employees(user):
   pass

e = user(3, 'Srikanth')
print(e._id)
print(e._name)
print(e._userdetails())

e1 = Employees(1, "Suresh")
print(e1._id)
print(e1._name)
e1._userdetails()               # We are able to access the protected members from the derived classes.


b. Private member: the private members access is limited to the defined class. If you try to access the private members outside of the class, you will get an exception.

'__' can not be overridden in child Class""" '''private'''
'''we cant outside the Class'''

E.g.
class user:
   __id = 10
   __name = "Suresh"

   def __userdetails(self):
     print("Private Method")

u1 = user()
print(u1.__id)
print(u1.__name)
u1.__userdetails()    # User will get Attribute error

c. Public method: All the python class members are public, and we can access all the class members outside of the class based on our requirements.

E.g.
class user:
   id = 10
   name = "Suresh"

   def __init__(self, uid, uname):
     self.id = uid
     self.name = uname

   def userdetails(self):
     print("Id: {}, Name: {}".format(self.id, self.name))

c = user(2, 'Srikanth')
print(c.userdetails())

=============================================================================================================
=============================================================================================================

3. INHERITANCE
Inheritance enables us to define a Class that takes all the functionality from a parent Class and allows us to add more

''' Parent Class '''

class parent:
    def __init__(self, value):
        self.value = value

    def google(self):
        print(f"executing parent google {self.value}")

    def apple(self):
        print(f"executing parent apple")
        self.google()

p = parent(10)
print(p.google())
print(p.apple())

''' Child Class's '''

Class child1(parent):
     def demo(self):
         print("execute demo")

c1 = child1(10)
print(c1.google())
print(c1.apple())
print(c1.demo())
print(c1.__init__)  # child1 Class having separate method called demo

** Overriding parent Class method

class child2(parent):
    def demo(self):
        print("execute demo")

    def google(self):
        print(f"executing child2 google {self.value}")

c2 = child2(10)
print(c2.google())
print(c2.apple())

** Child adding extra functionality and reused original functionality of parent
class child3(parent):
    def google(self):
        print("executing child 3 google")
        super().google()                #   super is used to access parent Class attributes

c3 = child3(10)
print(child3.__mro__)                      #  mro -method resolution order
print(c3.google())
print(c3.apple())


** Child Class having extra attributes
class child4(parent):
    def __init__(self, value, name):
        self.name = name
        super().__init__(value)              # Calling parent Class constructor

c4 = child4(10, 'srikanth')
print(c4.name)
print(c4.value)



a. Python Multi-Level inheritance
Multi-Level inheritance is possible in python like other object-oriented languages.
Multi-level inheritance is archived when a derived class inherits another derived class.

class a:
    def demo(self):
        print("Class a demo")

class b(a):
    def demo(self):
        print("Class b demo")
        super().demo()

class c(b):
    def demo(self):
        print("Class c demo")
        super().demo()

c1= a()
print(c1.demo())
c2 = b()
print(c2.demo())
c3 = c()
print(c3.demo())


b. Python Multiple inheritance
Python provides us the flexibility to inherit multiple base classes in the child class.

* Multiple Inheritance
Class parent2(child1, child2):
     pass

=============================================================================================================
=============================================================================================================
4. POLYMORPHISM

same function by name but different behavior

class Polymarph:
     def __init__(self, a, b):
         self.a = a
         self.b = b

     def add(self):
         return self.a + self.b

pol = Polymarph([1,2],[3,4])
print(pol.add())

pol = Polymarph(3,4)
print(pol.add())

























