Decorators

Decorator is a function it takes another function and add extra functionality without alter the main function
when function is decorate using @decorator function. when interpreter execute @decorator 2 major thing will happen outer function parameter func takes address of main function the main function will take address of wrapper function

Uses
Allow the extension of an existing function, without any modification to the original function source code.

Outer Function:
The outer function is the actual decorator function. It takes a function as an argument, defines an inner function, modifies or extends the behavior of the input function, and returns the inner function.

Inner Function:
The inner function is the wrapper that encapsulates the original function. It is the function that actually replaces or enhances the behavior of the original function passed to the decorator.


E.g.1
def log_decorator(func):   # outer function
    def wrapper(*args, **kwargs):   # inner function
        print(f"Calling function '{func.__name__}' with arguments {args} and {kwargs}")
        result = func(*args, **kwargs)
        print(f"Function '{func.__name__}' finished execution")
        return result
    return wrapper

@log_decorator
def add_numbers(a, b):
    return a + b

result = add_numbers(2, 3)  # This will trigger the decorator
print("Result:", result)

When you call add_numbers(2, 3), the log_decorator is applied to the add_numbers function. It prints information before and after calling add_numbers, providing a way to extend the behavior of the original function without modifying its code.

E.g.2
def outer(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        return abs(result)
    return wrapper

@outer
def sub(a,b):
    return a - b
print(sub(5,7))


==============================================================================================================
'Parameterized decorator' or 'Decorators with parameters'

There are cases where you may need to pass parameters to a decorator. The way around this is to pass parameters to the wrapper
function, which are then passed down to the decorated function.

