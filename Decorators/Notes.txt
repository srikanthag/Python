Decorators

Decorator is a function it takes another function and add extra functionality without alter the main function
when function is decorate using @decorator function. when interpreter execute @decorator 2 major thing will happen outer function parameter func takes address of main function the main function will take address of wrapper function

Uses
Allow the extension of an existing function, without any modification to the original function source code.

E.g.1
def str_rev(func):                            # here, we are creating a function and passing the parameter
    def wrapper(*args, **kwargs):      # here, we are creating a function and passing the parameter
        for i in range(3):
            func(*args, **kwargs)          # here, we are returning the function with the parameters
    return wrapper

@str_rev
def add(a,b):                                    # here, we are creating a function and passing the parameter
    print(a+b)
add(1,6)

@str_rev
def sub(a,b):
    print(a-b)
sub(1,6)

@str_rev
def mul(a,b):
    print(a*b)
mul(2,6)


E.g.2
def outer(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        return abs(result)
    return wrapper

@outer
def sub(a,b):
    return a - b
print(sub(5,7))


==============================================================================================================
'Parameterized decorator' or 'Decorators with parameters'

There are cases where you may need to pass parameters to a decorator. The way around this is to pass parameters to the wrapper
function, which are then passed down to the decorated function.

