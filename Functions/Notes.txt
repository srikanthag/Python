* Functions
A function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function.
A function can return data as a result.

Types of functions
1. Built-in function
* print()

def add (x, y):
    print(x + y)

add(4,5)  # No need to create any object here, directly we can call the function

* input()
* id()
* type()
* dir()

2. User define in function

* Return statement
A return statement is used to end the execution of the function call and “returns” the result
(value of the expression following the return keyword) to the caller.
A return statement is overall used to invoke a function so that the passed statements can be executed.

Eg.
def add(a, b):
	# returning sum of a and b
	return a + b

def is_true(a):
	# returning boolean of a
	return bool(a)

# calling function
res = add(2, 3)
print("Result of add function is {}".format(res))

res = is_true(2<5)
print("\nResult of is_true function is {}".format(res))

===================================================================

* Arguments:
Arguments are the variables passed to the function in the function call.
Parameters are the variables used in the function definition.

1. Positional argument

def greet(name, age):
     print(f"{name} is {age} year old")

greet("srikanth", 34)
greet(34, "srikanth")

2. Keyword argument

def greet(name, age):
     print(f"{name} is {age} year old")

greet(name="srikanth", age= 20)
greet(age= 20, name="srikanth")

3. Combination of Positional and Keyword arguments

def add_(a, b, c, d):
     print(a, b, c, d)

add_(1, 2, 3, 4)
add_(a=1, b=2, c=3, d=4)
add_(1, 2, c=3, d=4)
add_(a=1, b=2, 3, 4)   #syntax error

4. Positional only argument: '/' represent the Positional only argument. Before / only accept positional argument and after / it
can accept positional oe keyword argument.

def add_(a, b, c, d, /):
     print(a, b, c, d)

add_(1,2,3,4)
add_(a=1, b=2, c=3, d=4)

def add_(a, b, /, c, d, ):
     print(a, b, c, d)
add_(1, 2, c=3, d=4)
add_(1, b=2, 3, 4)

5. Keyword only argument: '*' represent the Keyword only argument. After * only accept keyword argument and before * it
can accept positional oe keyword argument.

def add_(*, a, b, c, d, ):
    print(a, b, c, d)
add_(a=1, b=2, c=3, d=4)
add_(1, b=2, c=3, d=4)

def add_(a, b, *, c, d):
    print(a, b, c, d)
# add_(a=1, b=2, c=3, d=4)
add_(1, 2, c=3, d=4)
add_(1, 2, 3, d=4) #type error


6. Variable positional argument (*args): USer doesn't know how many argument pass to the function.
*args are pack the data in the form of tuple

7. Keyword positional argument (**kwargs): *kwargs are pack the data in the form of dictionary.


** Default parameter: It indicate the function argument will take the value if user not passes the any value during
function call. Default value assigned by using assignment (=) operator.

#default parameters
# def add_(a,b,c=0):
#     return a+b+c
#
# print(add_(10, 20))



** Packing and Unpacking

* Packing
The * operator is the tuple (or iterables) unpacking operator. It allows packing multiple values into a single variable.

# def spam(*args):           #packing
#     print(args)
#
# spam(1, 2, 3)


* Unpacking
Python provides the ** operator to unpack the dictionary. This operator is also known as the dictionary unpacking operator.

d = dict(a=1, b=2, c=3)
print(*d)
print({**d})

def keyword_arg(**kwargs):
    return kwargs
print(keyword_arg(a=1, b= 2, c=3))

=======================================================================================================

Lambda function
Python Lambda Functions are anonymous functions means that the function is without a name. As we already know the def keyword is used to define a normal function in Python.
Similarly, the lambda keyword is used to define an anonymous function in Python.

This function can have any number of arguments but only one expression, which is evaluated and returned.

Syntax:
lambda arguments: Expression

eg: add = lambda a,b: a+b
      print(add)

=======================================================================================================

Filter function
The filter() function is utilized to apply a function to each element of an iterable (like a list or tuple)
and return another iterable containing just the elements for which the function brings True back.

syntax:
filter (function, iterable)

eg:
l = [1,2,3,4,5,6]          # Iterable
ev = lambda item: item % 2 ==0      # Function
re = filter(ev, l)
print(list(re))

=======================================================================================================
Map function
The map() function takes two arguments: a function and an iterable. The function contention is the function that
will be applied to every element of the iterable, and the iterable contention is the iterable that the function will be applied to

eg:
l = ['hi', 'mom']
pali = lambda string: 'palindrome' if string == string[::-1] else 'not palindrome'
res = map(pali, l)
print(list(res))

===========================================================================================================
Sorted function

* Default sorting the collection datatype

# s = 'srikanth'
# print(sorted(s))

# l = [5,7,4,6,9,3]
# print(sorted(l))

# l = ['hi', 'python', 'how']
# print(sorted(l))

# t = ('python', 'java', 'ruby')
# print(sorted(t))
# print(sorted(t, reverse=true))

# set_ = {'hi', 'python', 'how'}
# print(sorted(set_))

# d = {'hi': 5, 'python': 6, 'how': 3}
# print(sorted(d.items()))


* Custom sorting
t = ('python', 'java', 'ruby')
print(sorted(t, key=len))



