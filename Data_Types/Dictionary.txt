* Collections of key values pair.
* Key cannot be duplicate
* Values can be duplicate
* Values can be access through the key.
* Key must be immutable data type.
* Values can be anything

** Composite keys
* tuple as key

Holidays = {(26,1):"Republic day", (15,8): Independence day}


Python Dictionary Methods

1. clear():	Removes all the elements from the dictionary
d = {'a' : 1, 'b' : 2, 'c': 3, 'd' : 4, 'e' : 5}
print(d.clear())
print(d)

2. fromkeys(): Returns a dictionary with the specified keys and value
list = ['a', 'b', 'c']
# print(dict(list))           # Value error
d = {}
print(d.fromkeys(list))             # {'a': None, 'b': None, 'c': None}
print(d.fromkeys('hello', 'hi'))        # {'h': 'hi', 'e': 'hi', 'l': 'hi', 'o': 'hi'}

3. get(): Returns the value for a specified key if the key is in the dictionary; otherwise, returns a default value (if provided) or None
d = {'a' : 1, 'b' : 2, 'c': 3, 'd' : 4, 'e' : 5}
print(d.get('a'))

4. copy: Returns a shallow copy of the dictionary.
my_dict = {'a': 1, 'b': 2}
copy_dict = my_dict.copy()
print(copy_dict)  # Output: {'a': 1, 'b': 2}

5. items(): Returns a list containing a tuple for each key value pair
d = {'a' : 1, 'b' : 2, 'c': 3, 'd' : 4, 'e' : 5}
for key, value in d.items():
     print(value, end=',')

6. keys(): Returns a list containing the dictionary's keys
d.keys()
for key in d:
     d.key()
     print(key)

7. pop(): Removes the element with the specified key
d = {'a' : 1, 'b' : 2, 'c': 3, 'd' : 4, 'e' : 5}
print(d.pop('a'))           # Will return deleted item

8. popitem(): Removes and returns an arbitrary (key, value) pair from the dictionary. Raises a KeyError if the dictionary is empty.
d = {'a' : 1, 'b' : 2, 'c': 3, 'd' : 4, 'e' : 5}
print(d.popitem('a'))           # Will return deleted item
print(d.popitem())          # Delete last item

9. setdefault(): Returns the value of a specified key. If the key does not exist, inserts the key with a specified value.
my_dict = {'a': 1}
value = my_dict.setdefault('b', 2)
print(value)  # Output: 2
print(my_dict)  # Output: {'a': 1, 'b': 2}

value = my_dict.setdefault('a', 3)
print(value)  # Output: 1 (value of existing key 'a')
print(my_dict)  # Output: {'a': 1, 'b': 2}

10. update(): Updates the dictionary with the specified key-value pairs
d = {'a' : 1, 'b' : 2, 'c': 3, 'd' : 4, 'e' : 5}
d.update(f = 99)
d.update(a = 100)
print(d)

11. values(): Returns a list of all the values in the dictionary
d.values()
for value in d:
    d.values()
    print(value)